/* ===========================================================================
 * Copyright 2015 EUROPEAN UNION
 *
 * Licensed under the EUPL, Version 1.1 or subsequent versions of the
 * EUPL (the "License"); You may not use this work except in compliance
 * with the License. You may obtain a copy of the License at
 * http://ec.europa.eu/idabc/eupl
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Date: 02/04/2015
 * Authors:
 * - Michel Gerboles, michel.gerboles@jrc.ec.europa.eu, 
 *   Laurent Spinelle, laurent.spinelle@jrc.ec.europa.eu and 
 *   Alexander Kotsev, alexander.kotsev@jrc.ec.europa.eu:
 *			European Commission - Joint Research Centre, 
 * - Marco Signorini, marco.signorini@liberaintentio.com
 *
 * ===========================================================================
 */

package airsenseur.dev.helpers;

import airsenseur.dev.comm.AppDataMessage;
import airsenseur.dev.comm.ShieldProtocolLayer;
import java.io.IOException;
import java.util.HashMap;

/**
 * Starting from AirSensEURPanel R0.9 some shields have been removed, other added.
 * It became mandatory to identify the new shields in the sessions in order to prevent
 * mismatch in configuration when reading old files. 
 * This new typed session configuration file should increase compatibility with 
 * future shields
 * @author marco
 */
public class FileConfigurationTypedSessions extends FileConfiguration {
    
    private static final String BOARD_SESSION_IDENTIFIER = "####TS####";
    
    private final HashMap<Integer, SessionContent> typedSessionContents = new HashMap<>();
    
    // Releases Post 0.9 have typed sessions embedded in the configuration file.
    // Each session is statically associated to a shield type (i.e. board)
    //
    // Returns: the number of sessions found or -1 if no reader is available
    @Override
    protected int populateSessionsContents() {
        
        if (reader == null) {
            return -1;
        }
        
        try {
            
            // Mark the start position so we can rewind if required
            reader.mark(65536);
            
            String line;
            Integer sessionType = null;            
            while ((line = reader.readLine()) != null) {
            
                // Session is defined by the BOARD_SESSION_IDENTIFIER followed by two digits idenfitying the session type
                if (line.startsWith(BOARD_SESSION_IDENTIFIER) && (line.length() == BOARD_SESSION_IDENTIFIER.length() + 2)) {
                    sessionType = Integer.parseInt(line.substring(BOARD_SESSION_IDENTIFIER.length()).trim());
                    if (sessionType != 0) {
                        typedSessionContents.put(sessionType, new SessionContent());
                    } 
                    
                } else if ((sessionType != null) && (sessionType != 0)) {

                    // Populate session content
                    SessionContent session = typedSessionContents.get(sessionType);
                    session.add(line);
                }
            }
            
        } catch (IOException e) {
            return -1;
        }
        
        // If no typed sessions were found, let's try to read untyped sessions in order to translate
        // the file to the new format.
        // We know that untyped sessions files are generated by Pre0.9 and Pre0.4 versions.
        // 
        // -- For Pre0.9, sessions are based on tabs in the AirSensEUR Panels in this order:
        // ChemicalShield, MOX Shield, Exp1Shield. We do not support MOX Shield anymore 
        // so we skip the 2nd session, if present, and generate typed sessions for 
        // ChemicalShield and Exp1Shield.
        //
        // -- For Pre0.4, no sessions are available because only the ChemicalShield was available
        // at that time. We remap the untyped session in a ChemicalShield typed session
        if (typedSessionContents.isEmpty()) {
            try {
                reader.reset();
            } catch (IOException ex) {
            }
            int numOfSessionsFound = super.populateSessionsContents();
            
            // We're in Pre0.4 version?
            if (numOfSessionsFound == 1) {
                
                SessionContent session = super.getSessionContent(0);
                typedSessionContents.put(ShieldProtocolLayer.CHEM_SHIELD_R3X_TYPE_ID, session);
                
                // We're in Pre0.9 version?
            } else if (numOfSessionsFound == 3) {
                
                // Take the 1st session (1st tab in JP0.8 is the Chemical Sensor Shield)
                SessionContent session = super.getSessionContent(0);
                typedSessionContents.put(ShieldProtocolLayer.CHEM_SHIELD_R3X_TYPE_ID, session);
                
                // Take the 3rd session (3rd tab in JP0.8 is the Exp1 Shield)
                session = super.getSessionContent(2);
                typedSessionContents.put(ShieldProtocolLayer.EXP1_SHIELD_R1X_TYPE_ID, session);
            }
        }
        
        return typedSessionContents.size();
    }
    
    
    // Return the next command for the specified sessionID
    @Override
    public AppDataMessage getNextCommand(int session) {
        
        SessionContent sessionContent = typedSessionContents.get(session);
        if (sessionContent != null) {
            return super.getNextCommand(sessionContent);
        }
        
        return null;
    }
    
    /**
     * Generate a session header in the output file
     * @param sessionTypeID
     */
    public void generateBoardSession(Integer sessionTypeID) {
        if (writer == null) {
            return;
        }
        
        try {
            
          writer.write(BOARD_SESSION_IDENTIFIER);
          writer.write(String.format("%02d", sessionTypeID));
          writer.newLine();
          writer.flush();
          
        } catch (IOException e){
        } 
    }
    
}
