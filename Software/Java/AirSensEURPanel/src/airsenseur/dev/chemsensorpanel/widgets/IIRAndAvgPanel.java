/* ===========================================================================
 * Copyright 2015 EUROPEAN UNION
 *
 * Licensed under the EUPL, Version 1.1 or subsequent versions of the
 * EUPL (the "License"); You may not use this work except in compliance
 * with the License. You may obtain a copy of the License at
 * http://ec.europa.eu/idabc/eupl
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Date: 02/04/2015
 * Authors:
 * - Michel Gerboles, michel.gerboles@jrc.ec.europa.eu, 
 *   Laurent Spinelle, laurent.spinelle@jrc.ec.europa.eu and 
 *   Alexander Kotsev, alexander.kotsev@jrc.ec.europa.eu:
 *			European Commission - Joint Research Centre, 
 * - Marco Signorini, marco.signorini@liberaintentio.com
 *
 * ===========================================================================
 */

package airsenseur.dev.chemsensorpanel.widgets;

import airsenseur.dev.comm.AppDataMessage;
import airsenseur.dev.exceptions.SensorBusException;
import java.util.List;

/**
 *
 * @author marco
 */
public class IIRAndAvgPanel extends SensorBusInteractingPanel {

    /**
     * Creates new form IIRAndAvgPanel
     */
    public IIRAndAvgPanel() {
        initComponents();
    }
    
    @Override
    public void storeToBoard() throws SensorBusException {
        
        int prescaler = sampleRatePrescaler.getRegisterSelectedValue();
        int postscaler = sampleRatePostscaler.getRegisterSelectedValue();
        int decimation = sampleRateDecimation.getRegisterSelectedValue();
        
        shieldProtocolLayer.renderSamplerPrescaler(boardId, channelId, prescaler);
        shieldProtocolLayer.renderSamplerPostscaler(boardId, channelId, postscaler);
        shieldProtocolLayer.renderSamplerDecimation(boardId, channelId, decimation);
        
        if (!IIRSectionDisabled) {
            
            int iirDen1 = iIRDenominator1.getRegisterSelectedValue();
            int iirDen2 = iIRDenominator2.getRegisterSelectedValue();
            shieldProtocolLayer.renderSamplerIIRDenom(boardId, channelId, iirDen1, iirDen2);
        }
    }
    
    @Override
    public void readFromBoard() throws SensorBusException {
        
        shieldProtocolLayer.renderSamplerPrescalerRead(boardId, channelId);
        shieldProtocolLayer.renderSamplerPostscalerRead(boardId, channelId);
        shieldProtocolLayer.renderSamplerDecimationRead(boardId, channelId);
        
        if (!IIRSectionDisabled) {
            shieldProtocolLayer.renderSamplerIIRDenomRead(boardId, channelId);
        }
    }
    
    @Override
    public void evaluateRxMessage(AppDataMessage rxMessage) {
        
        Integer presc = shieldProtocolLayer.evalPrescalerInquiry(rxMessage, boardId, channelId);
        Integer posts = shieldProtocolLayer.evalPostScalerInquiry(rxMessage, boardId, channelId);
        Integer decim = shieldProtocolLayer.evalDecimationInquiry(rxMessage, boardId, channelId);
        
        if (presc != null) {
            sampleRatePrescaler.setSelectedItem(presc.intValue());
            jCBPre.repaint();
        }
        
        if (posts != null) {
            sampleRatePostscaler.setSelectedItem(posts.intValue());
            jCBPost.repaint();
        }
        
        if (decim != null) {
            sampleRateDecimation.setSelectedItem(decim.intValue());
            jCBDecimation.repaint();
        }
        
        if (!IIRSectionDisabled) {
            List<Integer> iirPars = shieldProtocolLayer.evalIIRDenomInquiry(rxMessage, boardId, channelId);
               
            if ((iirPars != null) && (iirPars.size() == 2)){
                Integer denom1 = iirPars.get(0);
                Integer denom2 = iirPars.get(1);

                if (denom1 != null) {
                    iIRDenominator1.setSelectedItem(denom1.intValue());
                    jCBIIR1.repaint();
                }
                if (denom2 != null) {
                    iIRDenominator2.setSelectedItem(denom2.intValue());
                    jCBIIR2.repaint();
                }
            }
        }
    }
    
    @Override
    public void onDataMessageFromConfiguration(AppDataMessage rxMessage) {
        evaluateRxMessage(rxMessage);
    }
    
    public void disablePrescaler() {
        jLabelCBPre.setEnabled(false);
        jCBPre.setEnabled(false);
    }
    
    public void disableIIRSection() {
        IIRSectionDisabled = true;
        jCBIIR1.setEnabled(false);
        jCBIIR2.setEnabled(false);
        jLabelIIR1.setEnabled(false);
        jLabelIIR2.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sampleRatePrescaler = new airsenseur.dev.chemsensorpanel.dataModel.SampleRatePrescaler();
        sampleRatePostscaler = new airsenseur.dev.chemsensorpanel.dataModel.SampleRatePostscaler();
        sampleRateDecimation = new airsenseur.dev.chemsensorpanel.dataModel.SampleRateDecimation();
        iIRDenominator1 = new airsenseur.dev.chemsensorpanel.dataModel.IIRDenominator();
        iIRDenominator2 = new airsenseur.dev.chemsensorpanel.dataModel.IIRDenominator();
        jLabelCBPre = new javax.swing.JLabel();
        jLabelIIR1 = new javax.swing.JLabel();
        jLabelIIR2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jCBPre = new javax.swing.JComboBox();
        jCBPost = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jCBDecimation = new javax.swing.JComboBox();
        jCBIIR1 = new javax.swing.JComboBox();
        jCBIIR2 = new javax.swing.JComboBox();

        jLabelCBPre.setText("Sample Rate Prescaler:");

        jLabelIIR1.setText("IIR1 Coefficient:");

        jLabelIIR2.setText("IIR2 Coefficient:");

        jLabel4.setText("Moving Average Window Size:");

        jCBPre.setModel(sampleRatePrescaler);

        jCBPost.setModel(sampleRatePostscaler);

        jLabel5.setText("Decimation Filter Size:");

        jCBDecimation.setModel(sampleRateDecimation);

        jCBIIR1.setModel(iIRDenominator1);

        jCBIIR2.setModel(iIRDenominator2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabelCBPre)
                    .addComponent(jLabelIIR1)
                    .addComponent(jLabelIIR2)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCBPost, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCBDecimation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCBIIR2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCBIIR1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCBPre, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jCBDecimation, jCBIIR1, jCBIIR2, jCBPost, jCBPre});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCBPre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelCBPre))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCBIIR1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelIIR1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCBIIR2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelIIR2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCBDecimation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCBPost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(5, 5, 5))
        );
    }// </editor-fold>//GEN-END:initComponents

    private boolean IIRSectionDisabled = false;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private airsenseur.dev.chemsensorpanel.dataModel.IIRDenominator iIRDenominator1;
    private airsenseur.dev.chemsensorpanel.dataModel.IIRDenominator iIRDenominator2;
    private javax.swing.JComboBox jCBDecimation;
    private javax.swing.JComboBox jCBIIR1;
    private javax.swing.JComboBox jCBIIR2;
    private javax.swing.JComboBox jCBPost;
    private javax.swing.JComboBox jCBPre;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelCBPre;
    private javax.swing.JLabel jLabelIIR1;
    private javax.swing.JLabel jLabelIIR2;
    private airsenseur.dev.chemsensorpanel.dataModel.SampleRateDecimation sampleRateDecimation;
    private airsenseur.dev.chemsensorpanel.dataModel.SampleRatePostscaler sampleRatePostscaler;
    private airsenseur.dev.chemsensorpanel.dataModel.SampleRatePrescaler sampleRatePrescaler;
    // End of variables declaration//GEN-END:variables
}
