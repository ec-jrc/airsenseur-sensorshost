/* ===========================================================================
 * Copyright 2015 EUROPEAN UNION
 *
 * Licensed under the EUPL, Version 1.1 or subsequent versions of the
 * EUPL (the "License"); You may not use this work except in compliance
 * with the License. You may obtain a copy of the License at
 * http://ec.europa.eu/idabc/eupl
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Date: 02/04/2015
 * Authors:
 * - Michel Gerboles, michel.gerboles@jrc.ec.europa.eu, 
 *   Laurent Spinelle, laurent.spinelle@jrc.ec.europa.eu and 
 *   Alexander Kotsev, alexander.kotsev@jrc.ec.europa.eu:
 *			European Commission - Joint Research Centre, 
 * - Marco Signorini, marco.signorini@liberaintentio.com
 *
 * ===========================================================================
 */


package airsenseur.dev.chemsensorpanel.widgets;

import airsenseur.dev.chemsensorpanel.dataModel.OPCN2SampleRatePostscaler;
import airsenseur.dev.comm.AppDataMessage;
import airsenseur.dev.exceptions.SensorBusException;

/**
 *
 * @author marco
 */
public class OPCN2PreAndPostPanel extends SensorBusInteractingPanel {

    private static final int TIMEBASE_MILLIS = 100;
    
    private static final int DEFAULT_POSTSCALER_VALUE = 30;
    private static final int DEFAULT_PRESCALER_VALUE = 1000 / TIMEBASE_MILLIS;
    
    
    private static final int OPCN2_MIN_QUERY_TIME = 1000 / TIMEBASE_MILLIS;
    private static final int OPCN2_MAX_QUERY_TIME = 10000 / TIMEBASE_MILLIS;

    private int prescalerFactor;
    private int postscalerFactor;
    private boolean recountExtimation = true;
    
    private int numOfChannels = 1;

    /**
     * Creates new form OPCN2PreAndPostPanel
     */
    public OPCN2PreAndPostPanel() {
        initComponents();
        
        prescalerFactor = DEFAULT_PRESCALER_VALUE;
        postscalerFactor = DEFAULT_POSTSCALER_VALUE;
        updateFinalSamplePeriod(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        oPCN2SampleRatePostscalerDataModel = new airsenseur.dev.chemsensorpanel.dataModel.OPCN2SampleRatePostscaler();
        oPCN2SampleRatePrescalerDataModel = new airsenseur.dev.chemsensorpanel.dataModel.OPCN2SampleRatePrescaler();
        jLabel1 = new javax.swing.JLabel();
        jSlDesiredSamplePeriod = new javax.swing.JSlider();
        jLblDesiredSampleRate = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jCBPostScaler = new javax.swing.JComboBox();
        jCBPrescaler = new javax.swing.JComboBox();

        jLabel1.setText("Desired final sample rate (seconds):");

        jSlDesiredSamplePeriod.setMaximum(120000);
        jSlDesiredSamplePeriod.setMinimum(1000);
        jSlDesiredSamplePeriod.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlDesiredSamplePeriodStateChanged(evt);
            }
        });

        jLblDesiredSampleRate.setText("?");

        jLabel2.setText("Prescaler");

        jLabel3.setText("Averager deep");

        jCBPostScaler.setModel(oPCN2SampleRatePostscalerDataModel);
        jCBPostScaler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBPostScalerActionPerformed(evt);
            }
        });

        jCBPrescaler.setModel(oPCN2SampleRatePrescalerDataModel);
        jCBPrescaler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBPrescalerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLblDesiredSampleRate, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSlDesiredSamplePeriod, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jCBPrescaler, 0, 1, Short.MAX_VALUE)
                            .addComponent(jCBPostScaler, 0, 109, Short.MAX_VALUE))
                        .addGap(0, 144, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLblDesiredSampleRate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSlDesiredSamplePeriod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jCBPrescaler, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jCBPostScaler, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jSlDesiredSamplePeriodStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlDesiredSamplePeriodStateChanged

        // Retrieve the desired sample time (in milliseconds) from the GUI element
        int iValue = jSlDesiredSamplePeriod.getValue();

        if (recountExtimation) {
            extimatePrescalerAndPostscaler(iValue);
        } else {
            updatePreAndPostscalerGUIElements();
        }

        updateFinalSamplePeriod(false);
    }//GEN-LAST:event_jSlDesiredSamplePeriodStateChanged

    private void updatePreAndPostscalerGUIElements() {
        oPCN2SampleRatePrescalerDataModel.setSelectedItem(prescalerFactor);
        jCBPrescaler.repaint();
        
        oPCN2SampleRatePostscalerDataModel.setSelectedItem(postscalerFactor);
        jCBPostScaler.repaint();
    }

    private void jCBPostScalerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBPostScalerActionPerformed

        postscalerFactor = oPCN2SampleRatePostscalerDataModel.getRegisterSelectedValue();
        updateFinalSamplePeriod(true);
    }//GEN-LAST:event_jCBPostScalerActionPerformed

    private void jCBPrescalerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBPrescalerActionPerformed
        prescalerFactor = oPCN2SampleRatePrescalerDataModel.getRegisterSelectedValue();
        updateFinalSamplePeriod(true);
    }//GEN-LAST:event_jCBPrescalerActionPerformed

    private void updateFinalSamplePeriod(boolean updateSlider) {
        
        int iValue = prescalerFactor * postscalerFactor * TIMEBASE_MILLIS;
        
        String periodInSeconds = String.format("%.2f", (float)iValue/1000);
        jLblDesiredSampleRate.setText(periodInSeconds);

        if (updateSlider) {
            recountExtimation = false;
            jSlDesiredSamplePeriod.setValue(iValue);
        } else {
            recountExtimation = true;
        }
    }
    
    // We expect desired sample time in milliseconds
    private void extimatePrescalerAndPostscaler(int iDesiredSampleTime) {
        
        // Retrieve sample time in ticks (board internal timebase)
        int sampleTimeInTicks = iDesiredSampleTime / TIMEBASE_MILLIS;
        
        // Loop on each available postscaler factors to extimate the OPCN2 query time.
        // We limit maximum OPCN2 queries to max 10s (as suggested by datasheet)
        int foundPostScaler = 0;
        int foundPrescaler = OPCN2_MAX_QUERY_TIME;
        for (int n = OPCN2SampleRatePostscaler.availablePostScalerFactors.length-1; n >= 0; n--) {
            
            int postScalerFactor = OPCN2SampleRatePostscaler.availablePostScalerFactors[n];
            int extimatedTimeInTicks = (sampleTimeInTicks / postScalerFactor);
            
            if ((extimatedTimeInTicks > OPCN2_MIN_QUERY_TIME) && (extimatedTimeInTicks < OPCN2_MAX_QUERY_TIME)) {
                foundPostScaler = postScalerFactor;
                foundPrescaler = extimatedTimeInTicks;
                break;
            }
        }
        
        if (foundPostScaler == 0) {
            foundPostScaler = 1;
        }
        
        postscalerFactor = foundPostScaler;
        prescalerFactor = foundPrescaler;
        
        updatePreAndPostscalerGUIElements();
    }    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jCBPostScaler;
    private javax.swing.JComboBox jCBPrescaler;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLblDesiredSampleRate;
    private javax.swing.JSlider jSlDesiredSamplePeriod;
    private airsenseur.dev.chemsensorpanel.dataModel.OPCN2SampleRatePostscaler oPCN2SampleRatePostscalerDataModel;
    private airsenseur.dev.chemsensorpanel.dataModel.OPCN2SampleRatePrescaler oPCN2SampleRatePrescalerDataModel;
    // End of variables declaration//GEN-END:variables

    // OPCN2 Shield defines logical "channels" to convey multiple
    // information like PM1, PM2,5, PM10 and 15 bins.
    // Each channel has its own channel Id.
    // Set the number of channels this panel is working on
    public void setNumOfChannels(int numOfChannels) {
        this.numOfChannels = numOfChannels;
    }
    
    @Override
    public void storeToBoard() throws SensorBusException {
        
        // There is only one prescaler for each channels in the OPCN2-Shield
        shieldProtocolLayer.renderSamplerPrescaler(boardId, channelId, prescalerFactor);
        
        for (int channel = 0; channel < numOfChannels; channel++) {
            shieldProtocolLayer.renderSamplerPostscaler(boardId, channelId+channel, postscalerFactor);
            shieldProtocolLayer.renderSavePresetWithName(boardId, channelId+channel, "U");
        }
    }
    
    @Override
    public void readFromBoard() throws SensorBusException {
        
        // There is only one prescaler for each channels in the OPCN2-Shield
        shieldProtocolLayer.renderSamplerPrescalerRead(boardId, channelId);
        
        for (int channel = 0; channel < numOfChannels; channel++) {
            shieldProtocolLayer.renderSamplerPostscalerRead(boardId, channelId+channel);
        }
    }

    @Override
    public void evaluateRxMessage(AppDataMessage rxMessage) {
        
        Integer prescaler = shieldProtocolLayer.evalPrescalerInquiry(rxMessage, boardId, channelId);
        if (prescaler != null) {
            prescalerFactor = prescaler.intValue();
            updateFinalSamplePeriod(true);
            return;
        }
        
        // We expect that the postscaler will be equal for all channels
        Integer postscaler = shieldProtocolLayer.evalPostScalerInquiry(rxMessage, boardId, channelId);
        if (postscaler != null) {
            postscalerFactor = postscaler.intValue();
            updateFinalSamplePeriod(true);
        }
    }

    @Override
    public void onDataMessageFromConfiguration(AppDataMessage rxMessage) {
        evaluateRxMessage(rxMessage);
    }
}
