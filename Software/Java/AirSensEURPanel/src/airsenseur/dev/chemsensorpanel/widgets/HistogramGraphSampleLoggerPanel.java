/* ===========================================================================
 * Copyright 2015 EUROPEAN UNION
 *
 * Licensed under the EUPL, Version 1.1 or subsequent versions of the
 * EUPL (the "License"); You may not use this work except in compliance
 * with the License. You may obtain a copy of the License at
 * http://ec.europa.eu/idabc/eupl
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Date: 02/04/2015
 * Authors:
 * - Michel Gerboles, michel.gerboles@jrc.ec.europa.eu, 
 *   Laurent Spinelle, laurent.spinelle@jrc.ec.europa.eu and 
 *   Alexander Kotsev, alexander.kotsev@jrc.ec.europa.eu:
 *			European Commission - Joint Research Centre, 
 * - Marco Signorini, marco.signorini@liberaintentio.com
 *
 * ===========================================================================
 */

package airsenseur.dev.chemsensorpanel.widgets;

import airsenseur.dev.chemsensorpanel.SampleLogger;
import airsenseur.dev.comm.AppDataMessage;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author marco
 */
public class HistogramGraphSampleLoggerPanel extends SampleLogger {
    
    private int numOfChannels = 1;
    private final List<Integer> lastTimestamps = new ArrayList<>();
    
    /**
     * Creates new form SampleLoggerPanel
     */
    public HistogramGraphSampleLoggerPanel() {
        initComponents();        
    }
    
    
    @Override
    public void setLoggerProperties(String title, int minVal, int maxVal, int numOfChannels) {
        
        histogramGraph.setTitle(title);
        histogramGraph.setMaxYValue(maxVal);
        histogramGraph.setNumBars(numOfChannels);
        this.numOfChannels = numOfChannels;
        lastTimestamps.clear();
        for (int channel = 0; channel < numOfChannels; channel++) {
            lastTimestamps.add(0);
        }
    }

    
    @Override
    public void readFromBoard() {
        if (shieldProtocolLayer != null) {
            
            // Ask for sample on all sensible channels
            for (int channel = 0; channel < numOfChannels; channel++) {
                if (highResEnabled) {
                    shieldProtocolLayer.renderGetLastSampleHRes(boardId, sensorId+channel);
                } else {
                    shieldProtocolLayer.renderGetLastSample(boardId, sensorId+channel);
                }
            }
        }
    }
    
    @Override
    public void evaluateRxMessage(AppDataMessage rxMessage) {
        super.evaluateRxMessage(rxMessage);
        
        if (shieldProtocolLayer == null) {
            return;
        }
        
        // Setup name
        String setupName = getName();
        if ((setupName != null) && !setupName.isEmpty()) {
            histogramGraph.setTitle(setupName);
        }
        
        
        // Evaluate samples on all sensible channels
        for (int channel = 0; channel < numOfChannels; channel++) {
            List<Integer> resultList = shieldProtocolLayer.evalLastSampleHResInquiry(rxMessage, boardId, sensorId+channel);
            if (resultList == null) {
                resultList = shieldProtocolLayer.evalLastSampleInquiry(rxMessage, boardId, sensorId+channel);
            }
            if (resultList != null) {
                
                int sample = resultList.get(0);
                int timestamp = resultList.get(1);
                                
                if (timestamp != lastTimestamps.get(channel)) {
                    lastTimestamps.set(channel, timestamp);

                    // Process the sample
                    double processed = onNewSample(sample, timestamp);
                    histogramGraph.addScore(channel, (int)processed);
                    jLabelLastTimestamp.setText("" + timestamp);
                    

                    // Log the sample to the board
                    if (fileLogger != null) {
                        fileLogger.appendSample(processed, getName(), getSerial(), boardId, sensorId+channel, timestamp);
                    }   
                }
            }
        }
        
    }


    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        histogramGraph.paintComponent(g);
    }    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabelLastTimestamp = new javax.swing.JLabel();
        histogramGraph = new airsenseur.dev.chemsensorpanel.widgets.HistogramGraphPanel();

        jLabel1.setText("Last Sample Timestamp:");

        jLabelLastTimestamp.setText("n/a");

        javax.swing.GroupLayout histogramGraphLayout = new javax.swing.GroupLayout(histogramGraph);
        histogramGraph.setLayout(histogramGraphLayout);
        histogramGraphLayout.setHorizontalGroup(
            histogramGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );
        histogramGraphLayout.setVerticalGroup(
            histogramGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 214, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(histogramGraph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelLastTimestamp, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(histogramGraph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabelLastTimestamp))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private airsenseur.dev.chemsensorpanel.widgets.HistogramGraphPanel histogramGraph;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelLastTimestamp;
    // End of variables declaration//GEN-END:variables
}
