/* ===========================================================================
 * Copyright 2015 EUROPEAN UNION
 *
 * Licensed under the EUPL, Version 1.1 or subsequent versions of the
 * EUPL (the "License"); You may not use this work except in compliance
 * with the License. You may obtain a copy of the License at
 * http://ec.europa.eu/idabc/eupl
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Date: 02/04/2015
 * Authors:
 * - Michel Gerboles, michel.gerboles@jrc.ec.europa.eu, 
 *   Laurent Spinelle, laurent.spinelle@jrc.ec.europa.eu and 
 *   Alexander Kotsev, alexander.kotsev@jrc.ec.europa.eu:
 *			European Commission - Joint Research Centre, 
 * - Marco Signorini, marco.signorini@liberaintentio.com
 *
 * ===========================================================================
 */

package airsenseur.dev.chemsensorpanel.widgets;

import airsenseur.dev.comm.AppDataMessage;
import airsenseur.dev.exceptions.SensorBusException;
import airsenseur.dev.helpers.Pair;

/**
 * Read/Writes all P,I,D and other coefficients for the cooling/heating PID 
 * stored in the ExpShield2 in generic register mode
 * @author marco
 */
public class PIDRegistersPanel extends SensorBusInteractingPanel {
    
    private final static int PID_SHARED_MULTIPLIER_BIT = (1<<16);
    private final static int PID_REG_P_COEFF = 0;
    private final static int PID_REG_I_COEFF = 1;
    private final static int PID_REG_D_COEFF = 2;
    private final static int PID_REG_DEADZONE_HEAT = 3;
    private final static int PID_REG_DEADZONE_COOL = 4;
    private final static int PID_REG_CHAMB_TEMP_SOURCE = 5;
    private final static int PID_REG_STORE_COEFFS = 6;
    private final static int PID_VAL_STORE_COEFFS = 0xAA;
   

    /**
     * Creates new form PIDRegistersPanel
     */
    public PIDRegistersPanel() {
        initComponents();
        
        // Define default PID values
        jTextPCoeff.setText(Float.toString(0.1f));
        jTextICoeff.setText(Float.toString(0.02f));
        jTextDCoeff.setText(Float.toString(0.0f));
        
        // Define default source reference
        jComboRefSource.setSelectedIndex(1);
        
        updateAllSliders();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pIDReferenceDataModel = new airsenseur.dev.chemsensorpanel.dataModel.PIDReferenceDataModel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextPCoeff = new javax.swing.JTextField();
        jTextICoeff = new javax.swing.JTextField();
        jTextDCoeff = new javax.swing.JTextField();
        jSliderDzHeat = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSliderDzCool = new javax.swing.JSlider();
        jLabel6 = new javax.swing.JLabel();
        jComboRefSource = new javax.swing.JComboBox<>();
        jLabelDzHeat = new javax.swing.JLabel();
        jLabelDzCool = new javax.swing.JLabel();

        jLabel1.setText("P Coefficient");

        jLabel2.setText("I Coefficient");

        jLabel3.setText("D Coefficient");

        jTextPCoeff.setText("0");
        jTextPCoeff.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextPCoeffKeyTyped(evt);
            }
        });

        jTextICoeff.setText("0");
        jTextICoeff.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextICoeffKeyTyped(evt);
            }
        });

        jTextDCoeff.setText("0");
        jTextDCoeff.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextDCoeffKeyTyped(evt);
            }
        });

        jSliderDzHeat.setMajorTickSpacing(10);
        jSliderDzHeat.setPaintTicks(true);
        jSliderDzHeat.setValue(5);
        jSliderDzHeat.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderDzHeatStateChanged(evt);
            }
        });

        jLabel4.setText("Heating Dead Zone");

        jLabel5.setText("Cooling Dead Zone");

        jSliderDzCool.setMinorTickSpacing(10);
        jSliderDzCool.setPaintTicks(true);
        jSliderDzCool.setValue(5);
        jSliderDzCool.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderDzCoolStateChanged(evt);
            }
        });

        jLabel6.setText("PID Ref. Source");

        jComboRefSource.setModel(pIDReferenceDataModel);

        jLabelDzHeat.setText("?");

        jLabelDzCool.setText("?");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboRefSource, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jSliderDzCool, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelDzCool, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(23, 23, 23)
                                    .addComponent(jTextDCoeff, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel2))
                                    .addGap(26, 26, 26)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jTextICoeff, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextPCoeff, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSliderDzHeat, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelDzHeat, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextPCoeff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextICoeff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextDCoeff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSliderDzHeat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSliderDzCool, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(jComboRefSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabelDzCool)))
                    .addComponent(jLabelDzHeat))
                .addContainerGap(10, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextPCoeffKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextPCoeffKeyTyped
        evaluateInputChar(evt);
    }//GEN-LAST:event_jTextPCoeffKeyTyped

    private void jTextICoeffKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextICoeffKeyTyped
        evaluateInputChar(evt);
    }//GEN-LAST:event_jTextICoeffKeyTyped

    private void jTextDCoeffKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextDCoeffKeyTyped
        evaluateInputChar(evt);
    }//GEN-LAST:event_jTextDCoeffKeyTyped

    private void jSliderDzHeatStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderDzHeatStateChanged
        
        updateAllSliders();
    }//GEN-LAST:event_jSliderDzHeatStateChanged

    private void jSliderDzCoolStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderDzCoolStateChanged
        updateAllSliders();
    }//GEN-LAST:event_jSliderDzCoolStateChanged

    private void updateAllSliders() {
        jLabelDzHeat.setText(jSliderDzHeat.getValue() + " %");        
        jLabelDzCool.setText(jSliderDzCool.getValue() + " %");
    }
    
    @Override
    public void storeToBoard() throws SensorBusException {

        try {
            
            float P = Float.valueOf(jTextPCoeff.getText()) * PID_SHARED_MULTIPLIER_BIT;
            float I = Float.valueOf(jTextICoeff.getText()) * PID_SHARED_MULTIPLIER_BIT;
            float D = Float.valueOf(jTextDCoeff.getText()) * PID_SHARED_MULTIPLIER_BIT;
            
            int dzHeat = jSliderDzHeat.getValue() * 100;
            int dzCool = jSliderDzCool.getValue() * 100;
            int sRef = jComboRefSource.getSelectedIndex();
            
            shieldProtocolLayer.renderWriteGenericRegister(boardId, channelId, PID_REG_P_COEFF, (int)P);
            shieldProtocolLayer.renderWriteGenericRegister(boardId, channelId, PID_REG_I_COEFF, (int)I);
            shieldProtocolLayer.renderWriteGenericRegister(boardId, channelId, PID_REG_D_COEFF, (int)D);
            shieldProtocolLayer.renderWriteGenericRegister(boardId, channelId, PID_REG_DEADZONE_HEAT, dzHeat);
            shieldProtocolLayer.renderWriteGenericRegister(boardId, channelId, PID_REG_DEADZONE_COOL, dzCool);
            shieldProtocolLayer.renderWriteGenericRegister(boardId, channelId, PID_REG_CHAMB_TEMP_SOURCE, sRef);
            
            // This is required to apply the values to internal registers
            shieldProtocolLayer.renderWriteGenericRegister(boardId, channelId, PID_REG_STORE_COEFFS, PID_VAL_STORE_COEFFS);
            
        } catch (NumberFormatException e) {
        }
    }

    @Override
    public void readFromBoard() throws SensorBusException {
        shieldProtocolLayer.renderReadGenericRegister(boardId, channelId, PID_REG_P_COEFF);
        shieldProtocolLayer.renderReadGenericRegister(boardId, channelId, PID_REG_I_COEFF);
        shieldProtocolLayer.renderReadGenericRegister(boardId, channelId, PID_REG_D_COEFF);
        shieldProtocolLayer.renderReadGenericRegister(boardId, channelId, PID_REG_DEADZONE_HEAT);
        shieldProtocolLayer.renderReadGenericRegister(boardId, channelId, PID_REG_DEADZONE_COOL);
        shieldProtocolLayer.renderReadGenericRegister(boardId, channelId, PID_REG_CHAMB_TEMP_SOURCE);
    }

    @Override
    public void evaluateRxMessage(AppDataMessage rxMessage) {
       
        Pair<Integer, Integer> result = shieldProtocolLayer.evalReadGenericRegister(rxMessage, boardId, channelId);
        if (result != null) {
            
            if (result.first != null) switch (result.first) {
                case 0:
                    jTextPCoeff.setText(evaluateFloatValue(result.second, PID_SHARED_MULTIPLIER_BIT));
                    break;
                case 1:
                    jTextICoeff.setText(evaluateFloatValue(result.second, PID_SHARED_MULTIPLIER_BIT));
                    break;
                case 2:
                    jTextDCoeff.setText(evaluateFloatValue(result.second, PID_SHARED_MULTIPLIER_BIT));
                    break;
                case 3:
                    jSliderDzHeat.setValue(evaluateIntValue(result.second, 100));
                    break;
                case 4:
                    jSliderDzCool.setValue(evaluateIntValue(result.second, 100));
                    break;
                case 5:
                    jComboRefSource.setSelectedIndex(evaluateIntValue(result.second, 1));
                    break;
                default:
                    break;
            }
        }
    }

    @Override
    public void onDataMessageFromConfiguration(AppDataMessage rxMessage) {
        evaluateRxMessage(rxMessage);
    }
    
    private Integer evaluateIntValue(int value, int multiplier) {
        
        int result = value;
        
        return result/multiplier;
    }
    
    private String evaluateFloatValue(int value, int multiplier) {
        
        try {
            float result = Float.valueOf(value) + 1;
            result = ((float)((int)((result / multiplier) * 10000)))/10000;
                        
            return String.format("%.5f", result);
                    
        } catch (NumberFormatException e) {
            return "0.0";
        }
    }
    
    private void evaluateInputChar(java.awt.event.KeyEvent evt) {
        char c = evt.getKeyChar();
                
        if (!Character.isDigit(c)) {
            if ( !((c == '.') || (c == ',')) ) {
                evt.consume();
            }
        }        
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboRefSource;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabelDzCool;
    private javax.swing.JLabel jLabelDzHeat;
    private javax.swing.JSlider jSliderDzCool;
    private javax.swing.JSlider jSliderDzHeat;
    private javax.swing.JTextField jTextDCoeff;
    private javax.swing.JTextField jTextICoeff;
    private javax.swing.JTextField jTextPCoeff;
    private airsenseur.dev.chemsensorpanel.dataModel.PIDReferenceDataModel pIDReferenceDataModel;
    // End of variables declaration//GEN-END:variables
}
