/* ===========================================================================
 * Copyright 2015 EUROPEAN UNION
 *
 * Licensed under the EUPL, Version 1.1 or subsequent versions of the
 * EUPL (the "License"); You may not use this work except in compliance
 * with the License. You may obtain a copy of the License at
 * http://ec.europa.eu/idabc/eupl
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Date: 02/04/2015
 * Authors:
 * - Michel Gerboles, michel.gerboles@jrc.ec.europa.eu, 
 *   Laurent Spinelle, laurent.spinelle@jrc.ec.europa.eu and 
 *   Alexander Kotsev, alexander.kotsev@jrc.ec.europa.eu:
 *			European Commission - Joint Research Centre, 
 * - Marco Signorini, marco.signorini@liberaintentio.com
 *
 * ===========================================================================
 */

package airsenseur.dev.chemsensorpanel.widgets;

import airsenseur.dev.comm.AppDataMessage;
import airsenseur.dev.exceptions.SensorBusException;

/**
 *
 * @author marco
 */
public class PresetCursorPanel extends SensorBusInteractingPanel {
    
    private String unit;
    private double factor = 100.0;
    private double guiFactor = 1/factor;

    /**
     * Creates new form GenericCursorPanel
     */
    public PresetCursorPanel() {
        initComponents();
        
        setMinimum(0);
        setMaximum(100);
        setValue(50);
    }    
    
    public void setLabel(String label) {
        jLabel.setText(label);
    }

    public void setMinimum(int value) { 
        sliderDataModel.setMinimum((int)(value * factor));
    }
    
    public void setMaximum(int value) {
        sliderDataModel.setMaximum((int)(value * factor));
    }
    
    public void setFactor(double factor) {
        this.factor = factor;
    }
    
    public void setGUIFactor(double guiFactor) {
        this.guiFactor = guiFactor;
    }
    
    public void setTickSpacing(int value) {
        
        jSlider.setMajorTickSpacing(value);
        jSlider.setSnapToTicks(true);
    }
        
    public void setValue(int value) {
        sliderDataModel.setValue((int)(value * factor));
    }
    
    public void setUnit(String unit) {
        this.unit = unit;
        refreshLabelValue();
    }
    
    private void refreshLabelValue() {
        String value = String.format("%.2f", (sliderDataModel.getValue() * guiFactor));
        jLabelVal.setText("" + value + " " + unit);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sliderDataModel = new airsenseur.dev.chemsensorpanel.dataModel.SliderDataModel();
        jLabel = new javax.swing.JLabel();
        jSlider = new javax.swing.JSlider();
        jLabelVal = new javax.swing.JLabel();

        jLabel.setText("Label");

        jSlider.setModel(sliderDataModel);
        jSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderStateChanged(evt);
            }
        });

        jLabelVal.setText("?");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelVal, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelVal)
                    .addComponent(jLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderStateChanged
        refreshLabelValue();
    }//GEN-LAST:event_jSliderStateChanged

    @Override
    public void storeToBoard() throws SensorBusException {
        
        int value = sliderDataModel.getValue();
        shieldProtocolLayer.renderWriteSetpoint(boardId, channelId, (short)value);
    }

    @Override
    public void readFromBoard() throws SensorBusException {
        shieldProtocolLayer.renderReadSetpoint(boardId, channelId);
    }

    @Override
    public void evaluateRxMessage(AppDataMessage rxMessage) {
        
        Short setpoint = shieldProtocolLayer.evalReadSetpoint(rxMessage, boardId, channelId);
        if (setpoint == null) {
            return;
        }
        
        sliderDataModel.setValue(setpoint);
    }

    @Override
    public void onDataMessageFromConfiguration(AppDataMessage rxMessage) {
        evaluateRxMessage(rxMessage);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel;
    private javax.swing.JLabel jLabelVal;
    private javax.swing.JSlider jSlider;
    private airsenseur.dev.chemsensorpanel.dataModel.SliderDataModel sliderDataModel;
    // End of variables declaration//GEN-END:variables
}
