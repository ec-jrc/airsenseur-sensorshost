/* ===========================================================================
 * Copyright 2015 EUROPEAN UNION
 *
 * Licensed under the EUPL, Version 1.1 or subsequent versions of the
 * EUPL (the "License"); You may not use this work except in compliance
 * with the License. You may obtain a copy of the License at
 * http://ec.europa.eu/idabc/eupl
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Date: 02/04/2015
 * Authors:
 * - Michel Gerboles, michel.gerboles@jrc.ec.europa.eu, 
 *   Laurent Spinelle, laurent.spinelle@jrc.ec.europa.eu and 
 *   Alexander Kotsev, alexander.kotsev@jrc.ec.europa.eu:
 *			European Commission - Joint Research Centre, 
 * - Marco Signorini, marco.signorini@liberaintentio.com
 *
 * ===========================================================================
 */

package airsenseur.dev.chemsensorpanel.setupdialogs;

import airsenseur.dev.chemsensorpanel.MainApplicationFrame;
import airsenseur.dev.chemsensorpanel.SensorSetupDialog;
import airsenseur.dev.comm.AppDataMessage;
import airsenseur.dev.comm.ShieldProtocolLayer;
import airsenseur.dev.exceptions.SensorBusException;

/**
 *
 * @author marco
 */
public class OPCN2SensorSetupDialog extends SensorSetupDialog {
       
    /**
     * Creates new form OPCN2SensorSetupDialog
     * @param parent
     * @param modal
     * @param sensorId
     * @param numChannels
     */
    public OPCN2SensorSetupDialog(MainApplicationFrame parent, boolean modal, int sensorId, int numChannels) {
        super(parent, modal, sensorId);
        initComponents();
        
        oPCN2PreAndPostPanel.setBoardId(boardId);
        oPCN2PreAndPostPanel.setChannelId(sensorId);
        oPCN2PreAndPostPanel.setNumOfChannels(numChannels);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        oPCN2PreAndPostPanel = new airsenseur.dev.chemsensorpanel.widgets.OPCN2PreAndPostPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Change OPC-N2 Sensor settings");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(oPCN2PreAndPostPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jSeparator1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(8, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(oPCN2PreAndPostPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    private airsenseur.dev.chemsensorpanel.widgets.OPCN2PreAndPostPanel oPCN2PreAndPostPanel;
    // End of variables declaration//GEN-END:variables

    
    @Override
    public void setBoardId(int boardId) {
        super.setBoardId(boardId);
    
        oPCN2PreAndPostPanel.setBoardId(boardId);
    }
    
    @Override
    public void setShieldProtocolLayer(ShieldProtocolLayer shieldProtocolLayer) {
        super.setShieldProtocolLayer(shieldProtocolLayer);
        
        oPCN2PreAndPostPanel.setShieldProtocolLayer(shieldProtocolLayer);
    }
    
    @Override
    public void storeToBoard() throws SensorBusException {
        oPCN2PreAndPostPanel.storeToBoard();
    }

    @Override
    public void readFromBoard() throws SensorBusException {
        oPCN2PreAndPostPanel.readFromBoard();
    }

    @Override
    public void evaluateRxMessage(AppDataMessage rxMessage) {
        oPCN2PreAndPostPanel.evaluateRxMessage(rxMessage);
    }
    
    @Override
    public void onDataMessageFromConfiguration(AppDataMessage rxMessage) {
        oPCN2PreAndPostPanel.onDataMessageFromConfiguration(rxMessage);
    }

    @Override
    public void onSensorPresetDatabaseChanged() {
        // Nothing to do with presets
    }
}
