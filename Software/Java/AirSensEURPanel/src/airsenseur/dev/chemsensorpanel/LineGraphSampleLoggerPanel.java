/* ===========================================================================
 * Copyright 2015 EUROPEAN UNION
 *
 * Licensed under the EUPL, Version 1.1 or subsequent versions of the
 * EUPL (the "License"); You may not use this work except in compliance
 * with the License. You may obtain a copy of the License at
 * http://ec.europa.eu/idabc/eupl
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Date: 02/04/2015
 * Authors:
 * - Michel Gerboles, michel.gerboles@jrc.ec.europa.eu, 
 *   Laurent Spinelle, laurent.spinelle@jrc.ec.europa.eu and 
 *   Alexander Kotsev, alexander.kotsev@jrc.ec.europa.eu:
 *			European Commission - Joint Research Centre, 
 * - Marco Signorini, marco.signorini@liberaintentio.com
 *
 * ===========================================================================
 */

package airsenseur.dev.chemsensorpanel;

import airsenseur.dev.comm.CommProtocolHelper;
import java.awt.Graphics;
import java.util.List;

/**
 *
 * @author marco
 */
public class LineGraphSampleLoggerPanel extends SampleLogger {
    
    /**
     * Creates new form SampleLoggerPanel
     */
    public LineGraphSampleLoggerPanel() {
        initComponents();        
    }
    
    
    @Override
    public void setLoggerProperties(String title, int minVal, int maxVal, int historyLength) {
        super.setLoggerProperties(title, minVal, maxVal, historyLength);
        
        lineGraph.setTitle(title);
        lineGraph.setMaxYValue(maxVal);
        lineGraph.setMaxHistory(historyLength);
    }
    
    
    @Override
    public void evaluateRxMessage(CommProtocolHelper.DataMessage rxMessage) {
        super.evaluateRxMessage(rxMessage);
        
        // Setup name
        String setupName = CommProtocolHelper.instance().evalSensorInquiry(rxMessage, sensorId);
        if ((setupName != null) && !setupName.isEmpty()) {
            lineGraph.setTitle(setupName);
        }
    }

    @Override
    protected double onNewSample(double sample, int timestamp) {
        sample = super.onNewSample(sample, timestamp); 
        
        lineGraph.addScore((int)sample);
        jLabelLastTimestamp.setText("" + timestamp);
        
        return sample;
    }
    
    
   @Override
   protected void paintComponent(Graphics g) {
       super.paintComponent(g);
       
       lineGraph.paintComponent(g);
   }    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lineGraph = new airsenseur.dev.chemsensorpanel.LineGraphPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabelLastTimestamp = new javax.swing.JLabel();

        javax.swing.GroupLayout lineGraphLayout = new javax.swing.GroupLayout(lineGraph);
        lineGraph.setLayout(lineGraphLayout);
        lineGraphLayout.setHorizontalGroup(
            lineGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        lineGraphLayout.setVerticalGroup(
            lineGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 268, Short.MAX_VALUE)
        );

        jLabel1.setText("Last Sample Timestamp:");

        jLabelLastTimestamp.setText("n/a");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lineGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelLastTimestamp, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 72, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lineGraph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabelLastTimestamp))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelLastTimestamp;
    private airsenseur.dev.chemsensorpanel.LineGraphPanel lineGraph;
    // End of variables declaration//GEN-END:variables
}
