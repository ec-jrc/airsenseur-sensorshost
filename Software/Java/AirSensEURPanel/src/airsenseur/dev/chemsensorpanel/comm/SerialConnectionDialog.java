/* ===========================================================================
 * Copyright 2015 EUROPEAN UNION
 *
 * Licensed under the EUPL, Version 1.1 or subsequent versions of the
 * EUPL (the "License"); You may not use this work except in compliance
 * with the License. You may obtain a copy of the License at
 * http://ec.europa.eu/idabc/eupl
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Date: 02/04/2015
 * Authors:
 * - Michel Gerboles, michel.gerboles@jrc.ec.europa.eu, 
 *   Laurent Spinelle, laurent.spinelle@jrc.ec.europa.eu and 
 *   Alexander Kotsev, alexander.kotsev@jrc.ec.europa.eu:
 *			European Commission - Joint Research Centre, 
 * - Marco Signorini, marco.signorini@liberaintentio.com
 *
 * ===========================================================================
 */

package airsenseur.dev.chemsensorpanel.comm;

import airsenseur.dev.comm.CommChannelSerialPort;
import airsenseur.dev.exceptions.SensorBusException;
import java.awt.Component;
import javax.swing.JList;
import purejavacomm.CommPortIdentifier;

/**
 *
 * @author marco
 */
public class SerialConnectionDialog extends javax.swing.JDialog {
    
    private final CommChannelSerialPort serialPortHelper = new CommChannelSerialPort();
    private SensorBusCommunicationHandler sensorBoard = null;
    private boolean connected = false;
    private int numOfBoardsEnabled = 0;

    /**
     * Creates new form ConnectionDialog
     * @param parent
     * @param numOfBoardsEnabled
     * @param modal
     */
    public SerialConnectionDialog(java.awt.Frame parent, int numOfBoardsEnabled, boolean modal) {
        super(parent, modal);
        
        this.numOfBoardsEnabled = numOfBoardsEnabled;
        
        serialPortHelper.refreshSerialPortList();
        
        initComponents();
        
        initComponentsBasedOnNumOfEnabledBoards();
    }
    
    private void initComponentsBasedOnNumOfEnabledBoards() {
        
        boolean pointToMultiPoint = jCBPointToMultipoint.isSelected();
        if (numOfBoardsEnabled == 0) {
            jStatusLabel.setText("No boards were enabled in the main panel");
            jButtonConnect.setEnabled(false);
        } else if ((!pointToMultiPoint) && (numOfBoardsEnabled != 1)) {
            jStatusLabel.setText("Only one board needs to be selected in point to point mode");
            jButtonConnect.setEnabled(false);
        } else {
            jStatusLabel.setText("Select a port then press Connect");
            jButtonConnect.setEnabled(true);
        }
    }
    
    public void init(SensorBusCommunicationHandler sensorBoard) {
        
        this.sensorBoard = sensorBoard;
        this.connected = false;
    }
    

    public boolean isConnected() {
        return connected;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonRefresh = new javax.swing.JButton();
        jButtonConnect = new javax.swing.JButton();
        jcbInterfaces = new javax.swing.JComboBox();
        jStatusLabel = new javax.swing.JLabel();
        jCBPointToMultipoint = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Serial Connection");
        setLocationByPlatform(true);
        setResizable(false);

        jButtonRefresh.setText("Refresh");
        jButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshActionPerformed(evt);
            }
        });

        jButtonConnect.setText("Connect");
        jButtonConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConnectActionPerformed(evt);
            }
        });

        jcbInterfaces.setModel(new javax.swing.DefaultComboBoxModel(serialPortHelper.enumerateSerialPortNames()));
        jcbInterfaces.setRenderer(new javax.swing.DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent (JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);

                if (value instanceof CommPortIdentifier) {
                    CommPortIdentifier portId = (CommPortIdentifier)value;
                    setText(portId.getName());
                }
                return this;
            }
        });

        jStatusLabel.setText("?");

        jCBPointToMultipoint.setText("Use Point to Multipoint protocol (only for debug)");
        jCBPointToMultipoint.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBPointToMultipointItemStateChanged(evt);
            }
        });
        jCBPointToMultipoint.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCBPointToMultipointStateChanged(evt);
            }
        });
        jCBPointToMultipoint.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jCBPointToMultipointPropertyChange(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap(335, Short.MAX_VALUE)
                .add(jButtonConnect)
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .add(23, 23, 23)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jCBPointToMultipoint)
                    .add(layout.createSequentialGroup()
                        .add(jButtonRefresh, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 96, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(13, 13, 13)
                        .add(jcbInterfaces, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 246, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(6, 6, 6)
                        .add(jStatusLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 372, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(35, 35, 35)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButtonRefresh)
                    .add(jcbInterfaces, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jCBPointToMultipoint)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jStatusLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(12, 12, 12)
                .add(jButtonConnect)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshActionPerformed
        serialPortHelper.refreshSerialPortList();
        jcbInterfaces.setModel(new javax.swing.DefaultComboBoxModel(serialPortHelper.enumerateSerialPortNames()));
    }//GEN-LAST:event_jButtonRefreshActionPerformed

    private void jButtonConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConnectActionPerformed
        
        if(sensorBoard != null) {
            
            CommPortIdentifier selPort = (CommPortIdentifier)jcbInterfaces.getModel().getSelectedItem();
            
            try {
                boolean pointToMultiPoint = jCBPointToMultipoint.isSelected();
                sensorBoard.connectToSerialLine(selPort.getName(), pointToMultiPoint);
            } catch (SensorBusException e) {
                String message = e.getErrorMessage();
                if (message == null) {
                    message = "Unknonwn exception";
                }
                jStatusLabel.setText(message);
                sensorBoard.disConnectFromBus();
                return;
            }
            
            connected = true;
            jStatusLabel.setText("Success");
            jButtonConnect.setEnabled(false);
            jCBPointToMultipoint.setEnabled(false);
        }
    }//GEN-LAST:event_jButtonConnectActionPerformed

    private void jCBPointToMultipointStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCBPointToMultipointStateChanged

    }//GEN-LAST:event_jCBPointToMultipointStateChanged

    private void jCBPointToMultipointPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jCBPointToMultipointPropertyChange

    }//GEN-LAST:event_jCBPointToMultipointPropertyChange

    private void jCBPointToMultipointItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBPointToMultipointItemStateChanged
        initComponentsBasedOnNumOfEnabledBoards();
    }//GEN-LAST:event_jCBPointToMultipointItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonConnect;
    private javax.swing.JButton jButtonRefresh;
    private javax.swing.JCheckBox jCBPointToMultipoint;
    private javax.swing.JLabel jStatusLabel;
    private javax.swing.JComboBox jcbInterfaces;
    // End of variables declaration//GEN-END:variables
}
