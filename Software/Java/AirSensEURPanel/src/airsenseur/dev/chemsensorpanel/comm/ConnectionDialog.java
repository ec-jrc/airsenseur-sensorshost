/* ===========================================================================
 * Copyright 2015 EUROPEAN UNION
 *
 * Licensed under the EUPL, Version 1.1 or subsequent versions of the
 * EUPL (the "License"); You may not use this work except in compliance
 * with the License. You may obtain a copy of the License at
 * http://ec.europa.eu/idabc/eupl
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Date: 02/04/2015
 * Authors:
 * - Michel Gerboles, michel.gerboles@jrc.ec.europa.eu, 
 *   Laurent Spinelle, laurent.spinelle@jrc.ec.europa.eu and 
 *   Alexander Kotsev, alexander.kotsev@jrc.ec.europa.eu:
 *			European Commission - Joint Research Centre, 
 * - Marco Signorini, marco.signorini@liberaintentio.com
 *
 * ===========================================================================
 */

package airsenseur.dev.chemsensorpanel.comm;

import airsenseur.dev.comm.ChemSensorBoard;
import airsenseur.dev.comm.SerialPortHelper;
import airsenseur.dev.exceptions.ChemSensorBoardException;
import java.awt.Component;
import javax.swing.JList;
import purejavacomm.CommPortIdentifier;

/**
 *
 * @author marco
 */
public class ConnectionDialog extends javax.swing.JDialog {
    
    private final SerialPortHelper serialPortHelper = new SerialPortHelper();
    private ChemSensorBoard sensorBoard = null;
    private boolean connected = false;

    /**
     * Creates new form ConnectionDialog
     * @param parent
     * @param modal
     */
    public ConnectionDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        
        serialPortHelper.refreshSerialPortList();
        
        initComponents();
        
        jStatusLabel.setText("Select a port then press Connect");
    }
    
    public void init(ChemSensorBoard sensorBoard) {
        
        this.sensorBoard = sensorBoard;
        this.connected = false;
    }
    

    public boolean isConnected() {
        return connected;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonRefresh = new javax.swing.JButton();
        jButtonConnect = new javax.swing.JButton();
        jcbInterfaces = new javax.swing.JComboBox();
        jStatusLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Connection");
        setLocationByPlatform(true);
        setResizable(false);

        jButtonRefresh.setText("Refresh");
        jButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshActionPerformed(evt);
            }
        });

        jButtonConnect.setText("Connect");
        jButtonConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConnectActionPerformed(evt);
            }
        });

        jcbInterfaces.setModel(new javax.swing.DefaultComboBoxModel(serialPortHelper.enumerateSerialPortNames()));
        jcbInterfaces.setRenderer(new javax.swing.DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent (JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);

                if (value instanceof CommPortIdentifier) {
                    CommPortIdentifier portId = (CommPortIdentifier)value;
                    setText(portId.getName());
                }
                return this;
            }
        });

        jStatusLabel.setText("?");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(23, 23, 23)
                .add(jButtonRefresh, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 96, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(13, 13, 13)
                .add(jcbInterfaces, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 246, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(22, 22, 22))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jStatusLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 241, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jButtonConnect)
                .add(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(35, 35, 35)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButtonRefresh)
                    .add(jcbInterfaces, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(14, 14, 14)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jStatusLabel)
                    .add(jButtonConnect))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshActionPerformed
        serialPortHelper.refreshSerialPortList();
        jcbInterfaces.setModel(new javax.swing.DefaultComboBoxModel(serialPortHelper.enumerateSerialPortNames()));
    }//GEN-LAST:event_jButtonRefreshActionPerformed

    private void jButtonConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConnectActionPerformed
        
        if(sensorBoard != null) {
            
            CommPortIdentifier selPort = (CommPortIdentifier)jcbInterfaces.getModel().getSelectedItem();
            
            try {
                sensorBoard.connectToBoard(selPort);
            } catch (ChemSensorBoardException e) {
                String message = e.getErrorMessage();
                if (message == null) {
                    message = "Unknonwn exception";
                }
                jStatusLabel.setText(message);
                sensorBoard.disConnectFromBoard();
                return;
            }
            
            connected = true;
            jStatusLabel.setText("Success");
            jButtonConnect.setEnabled(false);
        }
    }//GEN-LAST:event_jButtonConnectActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonConnect;
    private javax.swing.JButton jButtonRefresh;
    private javax.swing.JLabel jStatusLabel;
    private javax.swing.JComboBox jcbInterfaces;
    // End of variables declaration//GEN-END:variables
}
