/* ===========================================================================
 * Copyright 2015 EUROPEAN UNION
 *
 * Licensed under the EUPL, Version 1.1 or subsequent versions of the
 * EUPL (the "License"); You may not use this work except in compliance
 * with the License. You may obtain a copy of the License at
 * http://ec.europa.eu/idabc/eupl
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Date: 02/04/2015
 * Authors:
 * - Michel Gerboles, michel.gerboles@jrc.ec.europa.eu, 
 *   Laurent Spinelle, laurent.spinelle@jrc.ec.europa.eu and 
 *   Alexander Kotsev, alexander.kotsev@jrc.ec.europa.eu:
 *			European Commission - Joint Research Centre, 
 * - Marco Signorini, marco.signorini@liberaintentio.com
 *
 * ===========================================================================
 */

package airsenseur.dev.chemsensorpanel;

import airsenseur.dev.comm.CommProtocolHelper;

/**
 *
 * @author marco
 */
public class ChemSensorSetupDialog extends SensorSetupDialog {
    
    private int sensorId = 0;

    /**
     * Creates new form ChemSensorSetupDialog
     * @param parent
     * @param modal
     * @param sensorId
     */
    public ChemSensorSetupDialog(java.awt.Frame parent, boolean modal, int sensorId) {
        super(parent, modal);
        this.sensorId = sensorId;
        initComponents();
        
        aD5694RPanel.setLmp9100Panel(lMP91000Panel);
        
        sensorPresetLoadPanel.registerPresetDrivenPanel(lMP91000Panel);        
        sensorPresetLoadPanel.registerPresetDrivenPanel(aD5694RPanel);
    }
    
    /**
     * Update the board with the information set on this setup panel
     */
    @Override
    public void storeToBoard() {
        
        iIRAndAvgPanel.storeToBoard(sensorId);
        lMP91000Panel.storeToBoard(sensorId);
        aD5694RPanel.storeToBoard(sensorId);
        
        CommProtocolHelper.instance().renderSavePresetWithName(sensorId, lMP91000Panel.getSensorName());
    }

    @Override
    public void readFromBoard() {
        iIRAndAvgPanel.readFromBoard(sensorId);
        lMP91000Panel.readFromBoard(sensorId);
        aD5694RPanel.readFromBoard(sensorId);
        
        CommProtocolHelper.instance().renderSensorInquiry(sensorId);        
    }

    @Override
    public void evaluateRxMessage(CommProtocolHelper.DataMessage rxMessage) {
        
        lMP91000Panel.evaluateRxMessage(rxMessage, sensorId);
        iIRAndAvgPanel.evaluateRxMessage(rxMessage, sensorId);
        aD5694RPanel.evaluateRxMessage(rxMessage, sensorId);
        
        // Setup name
        String setupName = CommProtocolHelper.instance().evalSensorInquiry(rxMessage, sensorId);
        if ((setupName != null) && !setupName.isEmpty()) {
            lMP91000Panel.setSensorName(setupName);
        }
    }
    
    @Override
    public void onSensorPresetDatabaseChanged() {
        sensorPresetLoadPanel.onSensorPresetDatabaseChanged();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lMP91000Panel = new airsenseur.dev.chemsensorpanel.LMP91000Panel();
        iIRAndAvgPanel = new airsenseur.dev.chemsensorpanel.IIRAndAvgPanel();
        aD5694RPanel = new airsenseur.dev.chemsensorpanel.AD5694RPanel();
        sensorPresetLoadPanel = new airsenseur.dev.chemsensorpanel.SensorPresetLoadPanel();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Chemical Sensor Channel " + (sensorId + 1));
        setResizable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(sensorPresetLoadPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(aD5694RPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lMP91000Panel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(iIRAndAvgPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(sensorPresetLoadPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lMP91000Panel, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(aD5694RPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(iIRAndAvgPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private airsenseur.dev.chemsensorpanel.AD5694RPanel aD5694RPanel;
    private airsenseur.dev.chemsensorpanel.IIRAndAvgPanel iIRAndAvgPanel;
    private javax.swing.JSeparator jSeparator1;
    private airsenseur.dev.chemsensorpanel.LMP91000Panel lMP91000Panel;
    private airsenseur.dev.chemsensorpanel.SensorPresetLoadPanel sensorPresetLoadPanel;
    // End of variables declaration//GEN-END:variables

}
